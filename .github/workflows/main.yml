name: Deploy no ECR
#aa
on:
  push:
    branches: [master]

jobs:
  # build:
  #   name: Instalar dependencias e Construir
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Verificar código
  #       uses: actions/checkout@v2

  #     - name: Instala Dependencias e Construir
  #       run: |
  #         npm install
  #         npm run build

  # test:
  #   name: Testar
  #   runs-on: ubuntu-latest
  #   needs: build

  #   steps:
  #     - name: Verificar código
  #       uses: actions/checkout@v2

  #     - name: Usar cache das dependências do Node.js
  #       uses: actions/cache@v2
  #       with:
  #         path: |
  #           node_modules
  #         key: npm-${{ hashFiles('package-lock.json') }}
  #         restore-keys: |
  #           npm-

  #     - name: Executar testes
  #       run: |
  #         npm install
  #         npm run test
          
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    #needs: test
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v2
        
      - name: Instalar Terraform
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install terraform -y

      - name: Instalar Ansible
        run: |
          sudo apt-get update
          sudo apt-get install software-properties-common -y
          sudo apt-add-repository --yes --update ppa:ansible/ansible
          sudo apt-get install ansible -y
         
      - name: Testando arquivos
        run : | 
           cat /etc/ansible/ansible.cfg
           cat /etc/ansible/hosts
      - name: Seed Terraform
        run : |
          ssh-keygen -b 2048 -t rsa -f ~/.ssh/key -N ""
          cd terraform-ec2
          terraform init
          terraform destroy -var="AWS_REGION=us-east-1" -var="public_key=$(cat ~/.ssh/key.pub)" -var="AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" -var="AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" -var="AWS_TOKEN=${{ secrets.AWS_TOKEN }}"
          terraform apply -auto-approve -var="AWS_REGION=us-east-1" -var="public_key=$(cat ~/.ssh/key.pub)" -var="AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" -var="AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" -var="AWS_TOKEN=${{ secrets.AWS_TOKEN }}"
          ls
          cd /etc/ansible
          sudo echo -e "[defaults]\ntransport = ssh\nhost_key_checking = False\nprivate_key_file = ~/.ssh/key\n\n[inventory]\n\n[privilege_escalation]\n\n[paramiko_connection]\n\n[ssh_connection]\n\n[persistent_connection]\n\n[sudo_become_plugin]\n\n[selinux]\n\n[colors]\n\n[diff]" > ansible.cfg
          cat ansible.cfg
  #   name: Construir Imagem e Enviar para o Amazon ECR
  #   runs-on: ubuntu-latest
  #   needs: test

  #   steps:
  #     - name: Verificar código
  #       uses: actions/checkout@v2

  #     - name: Configurar credenciais da AWS
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-1
  #         aws-session-token: ${{ secrets.AWS_TOKEN }}

  #     - name: Fazer login no Amazon ECR
  #       id: login-ecr
  #       run: |
  #         aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_URL }}

  #     - name: Construir, adicionar tag e enviar imagem para o Amazon ECR
  #       env:
  #         ECR_REGISTRY: ${{ secrets.AWS_URL }}
  #         ECR_REPOSITORY: ${{ secrets.AWS_IMAGE }}
  #       run: |
  #         docker build -t $ECR_REPOSITORY .
  #         docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
  #         docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
